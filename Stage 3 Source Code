# Load required libraries
library(TCGAbiolinks)
library(SummarizedExperiment)
library(DESeq2)
library(clusterProfiler)
library(org.Hs.eg.db)
library(randomForest)
library(ggplot2)
library(dplyr)
library(pheatmap)

#Download TCGA-BRCA dataset
query <- GDCquery(
  project = "TCGA-BRCA",
  data.category = "Transcriptome Profiling",
  data.type = "Gene Expression Quantification",
  workflow.type = "STAR - Counts",
                  access = "open")
GDCdownload(query)
data <- GDCprepare(query)

#Clean and preprocess the data
# Extract counts,metadata and sample information
counts <- assay(data)
metadata <- as.data.frame(colData(data))
sample_info <- as.data.frame(colData(data))


# Handle missing values and normalize data
dds <- DESeqDataSetFromMatrix(countData = counts,
                              colData = sample_info,
                              design = ~ 1)
dds <- estimateSizeFactors(dds)
normalized_counts <- counts(dds, normalized = TRUE)

# Select samples based on available sample types
sample_types <- unique(sample_info$sample_type)
print("Available sample types:")
print(table(sample_info$sample_type))

# Function to select samples
select_samples <- function(sample_info, sample_type, n = 20) {
  samples <- which(sample_info$sample_type == sample_type)
  if (length(samples) > n) {
    samples <- sample(samples, n)
  }
  return(samples)
}

# Select samples (adjust these based on available sample types)
primary_samples <- select_samples(sample_info, "Primary Tumor")
solid_tissue_normal_samples <- select_samples(sample_info, "Solid Tissue Normal")


selected_samples <- c(primary_samples, solid_tissue_normal_samples)
selected_counts <- normalized_counts[, selected_samples]
selected_info <- sample_info[selected_samples, ]


# Differential expression analysis
dds_selected <- DESeqDataSetFromMatrix(countData = round(selected_counts),
                                       colData = selected_info,
                                       design = ~ sample_type)
dds_selected <- DESeq(dds_selected)
res <- results(dds_selected)

# Sort results by adjusted p-value
res_ordered <- res[order(res$padj), ]
sig_genes <- subset(res_ordered, padj < 0.05 & abs(log2FoldChange) > 1)


# Functional enrichment analysis
entrez_ids <- mapIds(org.Hs.eg.db, keys = rownames(sig_genes), keytype = "ENSEMBL", column = "ENTREZID")
  # GO Enrichment Analysis
  go_enrichment <- enrichGO(gene = entrez_ids,
                            OrgDb = org.Hs.eg.db,
                            ont = "BP",
                            pAdjustMethod = "BH",
                            pvalueCutoff = 0.05,
                            qvalueCutoff = 0.05)
  
  # Print GO enrichment results
  cat("\nTop 10 enriched GO terms:\n")
  print(head(summary(go_enrichment), 10))
  
  # Save GO enrichment results
  write.csv(summary(go_enrichment), "go_enrichment_results.csv")
  
  # KEGG Pathway Enrichment Analysis
  kegg_enrichment <- enrichKEGG(gene = entrez_ids,
                                organism = "hsa",
                                pvalueCutoff = 0.05)
  
  # Print KEGG enrichment results
  cat("\nTop 10 enriched KEGG pathways:\n")
  print(head(summary(kegg_enrichment), 10))
  
  # Save KEGG enrichment results
  write.csv(summary(kegg_enrichment), "kegg_enrichment_results.csv")
} else {
  cat("No valid ENTREZ IDs found. Skipping enrichment analysis.\n")
}

entrez_ids <- mapIds(org.Hs.eg.db, keys = rownames(sig_genes), keytype = "ENSEMBL", column = "ENTREZID")
go_enrichment <- enrichGO(gene = entrez_ids,
                          OrgDb = org.Hs.eg.db,
                          ont = "BP",
                          pAdjustMethod = "BH",
                          pvalueCutoff = 0.05,
                          qvalueCutoff = 0.05)

#Machine Learning
# Prepare data for ML
all.trans <- data.frame(t(selected_counts))
# Select the top 1000 most variable genes based on standard deviation

SDs <- apply(all.trans, 2, sd)
topPreds <- order(SDs, decreasing = TRUE)[1:1000]
all.trans <- all.trans[, topPreds]


# PreProcessing steps
# Remove near-zero variance predictors
all.zero <- preProcess(all.trans, method = 'nzv', uniqueCut = 15)
all.trans <- predict(all.zero, all.trans)

# Center the data
all.center <- preProcess(all.trans, method = 'center')
all.trans <- predict(all.center, all.trans)

# Remove highly correlated features
all.corr <- preProcess(all.trans, method = 'corr', cutoff = 0.5)
all.trans <- predict(all.corr, all.trans)

ml_data <- all.trans
ml_labels <- factor(selected_info$sample_type)

# Feature selection (using variance)
var_genes <- apply(ml_data, 2, var)
top_genes <- names(sort(var_genes, decreasing = TRUE))[1:1000]
ml_data_filtered <- ml_data[, top_genes]

# Split data into training and testing sets
set.seed(42)
train_indices <- sample(1:nrow(ml_data_filtered), 0.7 * nrow(ml_data_filtered))
train_data <- ml_data_filtered[train_indices, ]
train_labels <- ml_labels[train_indices]
test_data <- ml_data_filtered[-train_indices, ]
test_labels <- ml_labels[-train_indices]

# Random Forest classification
rf_model <- randomForest(x = train_data, y = train_labels, ntree = 500)
rf_predictions <- predict(rf_model, test_data)
rf_accuracy <- sum(rf_predictions == test_labels) / length(test_labels)

conf_matrix <- confusionMatrix(rf_predictions, test_labels)
conf_matrix_plot <- as.data.frame(conf_matrix$table)
conf_matrix_plot$Prediction <- factor(conf_matrix_plot$Prediction, levels = rev(levels(conf_matrix_plot$Prediction)))


# Visualizations

# Volcano plot
volcano_plot <- ggplot(data.frame(res), aes(x = log2FoldChange, y = -log10(padj))) +
  geom_point(aes(color = padj < 0.05 & abs(log2FoldChange) > 1), alpha = 0.6) +
  scale_color_manual(values = c("grey", "red")) +
  labs(title = "Volcano Plot of Differential Expression",
       x = "log2 Fold Change",
       y = "-log10 Adjusted p-value") +
  theme_minimal()


# confusion matrix
ggplot(conf_matrix_plot, aes(Prediction, Reference, fill = Freq)) +
  geom_tile() +
  geom_text(aes(label = sprintf("%d", Freq)), vjust = 1) +
  scale_fill_gradient(low = "white", high = "steelblue") +
  theme_minimal() +
  labs(title = "Confusion Matrix",
       x = "Predicted",
       y = "Actual")

# ROC Curve
roc_obj <- roc(test_labels, as.numeric(rf_predictions))
roc_plot <- ggroc(roc_obj) +
  geom_abline(slope = 1, intercept = 1, linetype = "dashed", color = "gray") +
  theme_minimal() +
  labs(title = paste("ROC Curve (AUC =", round(auc(roc_obj), 2), ")"),
       x = "False Positive Rate",
       y = "True Positive Rate")
ggsave("roc_curve_plot.png", roc_plot, width = 8, height = 6)

# Feature Importance
importance_scores <- importance(rf_model)
top_features <- head(importance_scores[order(importance_scores[, 1], decreasing = TRUE), , drop = FALSE], 20)
feature_importance_plot <- ggplot(data.frame(feature = rownames(top_features), importance = top_features[, 1]),
                                  aes(x = reorder(feature, importance), y = importance)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  theme_minimal() +
  labs(title = "Top 20 Feature Importance",
       x = "Features",
       y = "Importance")
ggsave("feature_importance_plot.png", feature_importance_plot, width = 10, height = 8)




# Heatmap of top differentially expressed genes
top_genes <- head(rownames(res_ordered), 50)
heatmap_data <- selected_counts[top_genes, ]
heatmap_plot <- pheatmap(heatmap_data,
                         scale = "row",
                         annotation_col = data.frame(sample_type = selected_info$sample_type),
                         show_rownames = FALSE,
                         main = "Heatmap of Top 50 Differentially Expressed Genes")

# Save results and plots
write.csv(res_ordered, "differential_expression_results.csv")
write.csv(summary(go_enrichment), "go_enrichment_results.csv")
ggsave("volcano_plot.png", volcano_plot)
png("heatmap_plot.png")
print(heatmap_plot)
dev.off()

# Print summary of results
cat("Number of significant differentially expressed genes:", nrow(sig_genes), "\n")
cat("Top 5 enriched GO terms:\n")
print(head(summary(go_enrichment), 5))
cat("Random Forest classification accuracy:", rf_accuracy, "\n")
